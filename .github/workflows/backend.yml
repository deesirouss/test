# name: Backend Tests

# on:
#   pull_request:
#     branches: [ dev ]
#     paths: [ 'backend/**' ]

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres
#         env:
#           POSTGRES_USER: cicd_user
#           POSTGRES_PASSWORD: cicd_password
#           POSTGRES_DB: cicd_workshop
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     steps:
#     - uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'
#         cache: 'npm'
#         cache-dependency-path: backend/package-lock.json

#     - name: Install dependencies
#       working-directory: ./backend
#       run: npm install --only=production && npm cache clean --force

#     - name: Run database migrations
#       working-directory: ./backend
#       run: npm run migrate

#     - name: Run all tests with coverage
#       working-directory: ./backend
#       run: npm test

#   deploy:
#     needs: test
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-1

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Build and push Docker image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         cd backend
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#     - name: Clear existing Docker images on EC2
#       run: |
#         aws ssm send-command \
#           --document-name "AWS-RunShellScript" \
#           --targets '[{"Key":"InstanceIds","Values":["i-INSTANCE_ID"]}]' \
#           --parameters '{"commands":["docker system prune -af"]}' \
#           --region us-east-1

#     - name: Pull latest Docker image and launch container
#       run: |
#         aws ssm send-command \
#           --document-name "AWS-RunShellScript" \
#           --targets '[{"Key":"InstanceIds","Values":["i-INSTANCE_ID"]}]' \
#           --parameters '{"commands":["docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG", "docker run -d -p 3001:3001 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"]}' \
#           --region us-east-1